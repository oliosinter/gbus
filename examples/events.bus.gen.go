// Code generated by events-bus-gen. DO NOT EDIT.
// source: events.go

// nolint
package main

import productModel "github.com/oliosinter/go-events-bus/examples/models"

import "reflect"

import "sync"

type (
	// EventsUserRegistrationHandlerFunc is a listener handler function for event 'UserRegistration'
	EventsUserRegistrationHandlerFunc func(arg0 *UserInfo)
	// EventsProductUpdateHandlerFunc is a listener handler function for event 'ProductUpdate'
	EventsProductUpdateHandlerFunc func(arg0 *productModel.Product)
	// EventsCombinedEventHandlerFunc is a listener handler function for event 'CombinedEvent'
	EventsCombinedEventHandlerFunc func(arg0 UserInfo, arg1 productModel.Product)
)

// NewEventsEmitter creates new EventsEmitter
func NewEventsEmitter() *EventsEmitter {
	return &EventsEmitter{}
}

// EventsEmitter implements events listener and events emitter operations
// for events UserRegistration, ProductUpdate, CombinedEvent
type EventsEmitter struct {
	lockUserRegistration sync.RWMutex

	onUserRegistration []EventsUserRegistrationHandlerFunc

	onUserRegistrationAsync []EventsUserRegistrationHandlerFunc

	lockProductUpdate sync.RWMutex

	onProductUpdate []EventsProductUpdateHandlerFunc

	onProductUpdateAsync []EventsProductUpdateHandlerFunc

	lockCombinedEvent sync.RWMutex

	onCombinedEvent []EventsCombinedEventHandlerFunc

	onCombinedEventAsync []EventsCombinedEventHandlerFunc
}

// EventsBus is a client side of event bus that allows subscribe to
// UserRegistration, ProductUpdate, CombinedEvent events
type EventsBus interface {
	Events
	// OnUserRegistration adds event listener for 'UserRegistration' event
	OnUserRegistration(handler EventsUserRegistrationHandlerFunc)
	// OnUserRegistrationAsync adds event listener for 'UserRegistration' event
	OnUserRegistrationAsync(handler EventsUserRegistrationHandlerFunc)
	// RemoveUserRegistration excludes event listener
	RemoveUserRegistration(handler EventsUserRegistrationHandlerFunc)
	// OnProductUpdate adds event listener for 'ProductUpdate' event
	OnProductUpdate(handler EventsProductUpdateHandlerFunc)
	// OnProductUpdateAsync adds event listener for 'ProductUpdate' event
	OnProductUpdateAsync(handler EventsProductUpdateHandlerFunc)
	// RemoveProductUpdate excludes event listener
	RemoveProductUpdate(handler EventsProductUpdateHandlerFunc)
	// OnCombinedEvent adds event listener for 'CombinedEvent' event
	OnCombinedEvent(handler EventsCombinedEventHandlerFunc)
	// OnCombinedEventAsync adds event listener for 'CombinedEvent' event
	OnCombinedEventAsync(handler EventsCombinedEventHandlerFunc)
	// RemoveCombinedEvent excludes event listener
	RemoveCombinedEvent(handler EventsCombinedEventHandlerFunc)
}

// OnUserRegistration adds event listener for 'UserRegistration' event
func (bus *EventsEmitter) OnUserRegistration(handler EventsUserRegistrationHandlerFunc) {
	bus.lockUserRegistration.Lock()
	defer bus.lockUserRegistration.Unlock()
	bus.onUserRegistration = append(bus.onUserRegistration, handler)
}

// OnUserRegistrationAsync adds event listener for 'UserRegistration' event
func (bus *EventsEmitter) OnUserRegistrationAsync(handler EventsUserRegistrationHandlerFunc) {
	bus.lockUserRegistration.Lock()
	defer bus.lockUserRegistration.Unlock()
	bus.onUserRegistrationAsync = append(bus.onUserRegistrationAsync, handler)
}

// RemoveUserRegistration excludes event listener
func (bus *EventsEmitter) RemoveUserRegistration(handler EventsUserRegistrationHandlerFunc) {
	bus.lockUserRegistration.Lock()
	defer bus.lockUserRegistration.Unlock()
	var res []EventsUserRegistrationHandlerFunc
	refVal := reflect.ValueOf(handler).Pointer()
	for _, f := range bus.onUserRegistration {
		if reflect.ValueOf(f).Pointer() != refVal {
			res = append(res, f)
		}
	}
	bus.onUserRegistration = res
	
	res = []EventsUserRegistrationHandlerFunc{}
	for _, f := range bus.onUserRegistrationAsync {
		if reflect.ValueOf(f).Pointer() != refVal {
			res = append(res, f)
		}
	}
	bus.onUserRegistrationAsync = res
}

// UserRegistration emits event with the same name
func (bus *EventsEmitter) UserRegistration(arg0 *UserInfo) {
	bus.lockUserRegistration.RLock()
	defer bus.lockUserRegistration.RUnlock()
	wg := &sync.WaitGroup{}
	for _, f := range bus.onUserRegistrationAsync {
		wg.Add(1)
		go func(wg *sync.WaitGroup, f EventsUserRegistrationHandlerFunc) {
			defer wg.Done()
			f(arg0)
		}(wg, f)
	}
	for _, f := range bus.onUserRegistration {
		f(arg0)
	}
	wg.Wait()
}

// OnProductUpdate adds event listener for 'ProductUpdate' event
func (bus *EventsEmitter) OnProductUpdate(handler EventsProductUpdateHandlerFunc) {
	bus.lockProductUpdate.Lock()
	defer bus.lockProductUpdate.Unlock()
	bus.onProductUpdate = append(bus.onProductUpdate, handler)
}

// OnProductUpdateAsync adds event listener for 'ProductUpdate' event
func (bus *EventsEmitter) OnProductUpdateAsync(handler EventsProductUpdateHandlerFunc) {
	bus.lockProductUpdate.Lock()
	defer bus.lockProductUpdate.Unlock()
	bus.onProductUpdateAsync = append(bus.onProductUpdateAsync, handler)
}

// RemoveProductUpdate excludes event listener
func (bus *EventsEmitter) RemoveProductUpdate(handler EventsProductUpdateHandlerFunc) {
	bus.lockProductUpdate.Lock()
	defer bus.lockProductUpdate.Unlock()
	var res []EventsProductUpdateHandlerFunc
	refVal := reflect.ValueOf(handler).Pointer()
	for _, f := range bus.onProductUpdate {
		if reflect.ValueOf(f).Pointer() != refVal {
			res = append(res, f)
		}
	}
	bus.onProductUpdate = res
	
	res = []EventsProductUpdateHandlerFunc{}
	for _, f := range bus.onProductUpdateAsync {
		if reflect.ValueOf(f).Pointer() != refVal {
			res = append(res, f)
		}
	}
	bus.onProductUpdateAsync = res
}

// ProductUpdate emits event with the same name
func (bus *EventsEmitter) ProductUpdate(arg0 *productModel.Product) {
	bus.lockProductUpdate.RLock()
	defer bus.lockProductUpdate.RUnlock()
	wg := &sync.WaitGroup{}
	for _, f := range bus.onProductUpdateAsync {
		wg.Add(1)
		go func(wg *sync.WaitGroup, f EventsProductUpdateHandlerFunc) {
			defer wg.Done()
			f(arg0)
		}(wg, f)
	}
	for _, f := range bus.onProductUpdate {
		f(arg0)
	}
	wg.Wait()
}

// OnCombinedEvent adds event listener for 'CombinedEvent' event
func (bus *EventsEmitter) OnCombinedEvent(handler EventsCombinedEventHandlerFunc) {
	bus.lockCombinedEvent.Lock()
	defer bus.lockCombinedEvent.Unlock()
	bus.onCombinedEvent = append(bus.onCombinedEvent, handler)
}

// OnCombinedEventAsync adds event listener for 'CombinedEvent' event
func (bus *EventsEmitter) OnCombinedEventAsync(handler EventsCombinedEventHandlerFunc) {
	bus.lockCombinedEvent.Lock()
	defer bus.lockCombinedEvent.Unlock()
	bus.onCombinedEventAsync = append(bus.onCombinedEventAsync, handler)
}

// RemoveCombinedEvent excludes event listener
func (bus *EventsEmitter) RemoveCombinedEvent(handler EventsCombinedEventHandlerFunc) {
	bus.lockCombinedEvent.Lock()
	defer bus.lockCombinedEvent.Unlock()
	var res []EventsCombinedEventHandlerFunc
	refVal := reflect.ValueOf(handler).Pointer()
	for _, f := range bus.onCombinedEvent {
		if reflect.ValueOf(f).Pointer() != refVal {
			res = append(res, f)
		}
	}
	bus.onCombinedEvent = res
	
	res = []EventsCombinedEventHandlerFunc{}
	for _, f := range bus.onCombinedEventAsync {
		if reflect.ValueOf(f).Pointer() != refVal {
			res = append(res, f)
		}
	}
	bus.onCombinedEventAsync = res
}

// CombinedEvent emits event with the same name
func (bus *EventsEmitter) CombinedEvent(arg0 UserInfo, arg1 productModel.Product) {
	bus.lockCombinedEvent.RLock()
	defer bus.lockCombinedEvent.RUnlock()
	wg := &sync.WaitGroup{}
	for _, f := range bus.onCombinedEventAsync {
		wg.Add(1)
		go func(wg *sync.WaitGroup, f EventsCombinedEventHandlerFunc) {
			defer wg.Done()
			f(arg0, arg1)
		}(wg, f)
	}
	for _, f := range bus.onCombinedEvent {
		f(arg0, arg1)
	}
	wg.Wait()
}
